---
# tasks file for time_clock_cron_check

- name: Set script path variable
  set_fact:
    scripts_path: "/root/scripts/"

- name: Ensure log directory exists
  delegate_to: localhost
  file:
    path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}"
    state: directory

- name: Set path variable
  set_fact:
    files_directory: "{{ scripts_path }}/AutoDeploy360/based_on_role_yaml/time_clock_cron_check/files"

- name: Set record file path variable
  set_fact:
    record_file_path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}/record.txt"

- name: Set output file path variable
  set_fact:
    output_file_path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}/output.txt"

- name: Create a file on remote host
  file:
    path: "/tmp/{{ ansible_default_ipv4.address }}"
    state: touch

- name: Get file stat from remote
  stat:
    path: "/tmp/{{ ansible_default_ipv4.address }}"
  register: remote_file

- name: Create a file on local host
  file:
    path: "/tmp/localfile"
    state: touch
  delegate_to: localhost

- name: Get file stat from local
  stat:
    path: "/tmp/localfile"
  delegate_to: localhost
  register: local_file

- name: Ensure record file exists
  file:
    path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}/record.txt"
    state: touch
  delegate_to: localhost

- name: Add header to record file
  lineinfile:
    path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}/record.txt"
    line: '#ip,remote_file_time,local_file_time,remote_hwclock_time,remote_date_time'
    insertbefore: BOF
  delegate_to: localhost

- name: Get hwclock and date from remote
  shell: hwclock --show ; date
  register: remote_time

- name: Record file time attribute
  lineinfile:
    path: "{{ scripts_path }}/AutoDeploy360/time_clock_cron_check_log/{{ lookup('pipe','date +%Y/%m/%d') }}/record.txt"
    line: "{{ ansible_default_ipv4.address }},{{ remote_file.stat.mtime }},{{ local_file.stat.mtime }},{{ remote_time.stdout_lines[0] }},{{ remote_time.stdout_lines[1] }}"
  delegate_to: localhost

- name: Delete local file
  file:
    path: "/tmp/localfile"
    state: absent
  delegate_to: localhost

- name: Check if output file exists
  stat:
    path: "{{ output_file_path }}"
  register: output_file
  delegate_to: localhost

- name: Backup output file if exists
  command:
    cmd: "cp -f {{ output_file_path }} {{ output_file_path }}_{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"
  when: output_file.stat.exists
  delegate_to: localhost

- name: Run Python script
  ansible.builtin.command:
    cmd: python3 report_check_time.py "{{ record_file_path }}" "{{ output_file_path }}"
    chdir: "{{ files_directory }}"
  delegate_to: localhost
