- name: Include vars
  include_vars: ../vars/system_users.yaml

- name: Check known_hosts modification time
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
  register: known_hosts_stat
  become: true

- name: Calculate time difference in minutes
  set_fact:
    time_difference: "{{ ((ansible_date_time.epoch | int) - (known_hosts_stat.stat.mtime | int)) / 60 }}"
  when: known_hosts_stat.stat.exists

- name: Clean known_hosts file if older than 5 minute
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    state: absent
  become: true
  when: known_hosts_stat.stat.exists and time_difference | int > 5

- name: Check last successful connection time
  ansible.builtin.stat:
    path: "{{ files_directory }}/last_successful_connection"
  register: last_successful_connection_stat

- name: Calculate time difference in minutes
  set_fact:
    time_difference: "{{ ((ansible_date_time.epoch | int) - (last_successful_connection_stat.stat.mtime | int)) / 60 }}"
  when: last_successful_connection_stat.stat.exists

- name: Test SSH connection
  shell: 'ssh -o "StrictHostKeyChecking=no" -o "BatchMode=yes" -o "ConnectTimeout=10" -p {{ item[1] + base_ssh_tunnel_port }} {{ item[0] }}@localhost "cat /etc/os-release"'
  with_nested:
    - "{{ users }}"
    - "{{ range(0, reachable_ips | length) }}"
  register: ssh_test_results
  ignore_errors: true
  failed_when: false

- name: Filter successful SSH connections
  set_fact:
    successful_ssh: "{{ ssh_test_results.results | selectattr('rc', 'equalto', 0) | list }}"

- name: Filter failed SSH connections
  set_fact:
    failed_ssh: "{{ ssh_test_results.results | rejectattr('rc', 'equalto', 0) | list }}"

- name: Write SSH test results to file
  copy:
    content: "{{ successful_ssh | to_nice_json }}"
    dest: "{{ files_directory }}/successful_ssh.json"

- name: Write failed SSH test results to file
  copy:
    content: "{{ failed_ssh | to_nice_json }}"
    dest: "{{ files_directory }}/failed_ssh.json"

- name: Generate failed SSH test results explanation
  template:
    src: ../templates/explanation_ssh_fail_connect.j2
    dest: "{{ files_directory }}/failed_ssh_explanation.txt"

- name: Run Python script
  ansible.builtin.command:
    cmd: python3 run.py
    chdir: "{{ files_directory }}"

- name: Read output.txt
  slurp:
     src: "{{ files_directory }}/output.txt"
  register: slurp_content

- name: Decode and split lines
  set_fact:
    content: "{{ slurp_content['content'] | b64decode | split('\n') }}"

- name: Initialize centos_servers
  set_fact:
    centos_servers: []

- name: Initialize ubuntu_servers
  set_fact:
    ubuntu_servers: []

- name: Set ubuntu_servers
  set_fact:
    ubuntu_servers: "{{ ubuntu_servers|default([]) + [item.split(' ')] }}"
  with_items: "{{ content }}"
  when: "'ubuntu20' in item"

- name: Set centos_servers
  set_fact:
    centos_servers: "{{ centos_servers|default([]) + [item.split(' ')] }}"
  with_items: "{{ content }}"
  when: "'centos7' in item"

- name: Create hosts.yaml from template
  template:
    src: ../templates/host.yaml.j2
    dest: "{{ files_directory }}/hosts.yaml"
  vars:
    ubuntu_servers: "{{ ubuntu_servers }}"
    centos_servers: "{{ centos_servers }}"

- name: Create a flag file after successful connection
  file:
    path: "{{ files_directory }}/last_successful_connection"
    state: touch
  when: not last_successful_connection_stat.stat.exists or time_difference | int > 5
