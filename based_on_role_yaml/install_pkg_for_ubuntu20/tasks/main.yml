---
# tasks file for install_pkg_for_ubuntu20
- name: Include vars
  include_vars: ../vars/install_pkg_var.yaml

- name: Check if the marker file exists
  stat:
    path: "{{ marker_file_path }}"
  register: marker

- name: Check if cube_node_order_key exists
  stat:
    path: "{{ cube_node_order_key_path }}"
  register: cube_node_order_key_stat
  delegate_to: localhost

- name: Check if cube_node_key exists
  stat:
    path: "{{ cube_node_key_path }}"
  register: cube_node_key_stat
  delegate_to: localhost

- block:
  - name: Check if cube_node_order_key exists and has 2 lines
    shell: "wc -l {{ cube_node_order_key_path }} | awk '{print $1}'"
    register: cube_node_order_key_line_count
    delegate_to: localhost

  - name: Run tasks for cube_node_order_key
    block:
      - name: Copy install_cube_node_order.pkg to remote host
        copy:
          src: install_cube_node_order.pkg
          dest: /tmp/install_cube_node_order.pkg
          mode: '0755'

      - name: Execute install_cube_node_order.pkg
        command: "./install_cube_node_order.pkg /etc/mm"
        args:
          chdir: /tmp

      - name: Run build-dependency.sh script in /etc/mm
        command: "./scripts/build-dependency.sh"
        args:
          chdir: /etc/mm

      - name: Read cube_node_order_key content and split into lines
        shell: "cat {{ cube_node_order_key_path }} | awk 'NR==1; NR==2'"
        register: cube_node_order_key_content_lines
        delegate_to: localhost

      - name: Set cube_node_order_key_content variables for both lines
        set_fact:
          cube_node_order_key_content: "{{ cube_node_order_key_content_lines.stdout_lines[0] }}"
          order_key_content: "{{ cube_node_order_key_content_lines.stdout_lines[1] }}"

      - name: Run tasks for cube_node_order_key
        block:
          - name: Create mm.ini
            copy:
              content: |
                [core]
                temp-path=tmp

                [extension]
                paths=
                  ../extensions

                [logging]
                log-level=INFO

                [java]
                path = /etc/mm/jdk/bin/java
              dest: "/tmp/mm.ini"

      - name: Create cube-node.ini
        copy:
          content: |
            [cube-mesh]
            server-list=
              {{ server_ip }}:8837

            [cube-node]
            key={{ cube_node_order_key_content }}
          dest: "/tmp/cube-node.ini"

      - name: Create order.ini
        copy:
          content: |
            [creeper-service]
            servers={{ server_ip }}:8323
            key={{ order_key_content }}
          dest: "/tmp/order.ini"

      - name: Copy files to remote host
        copy:
          src: "/tmp/{{ item }}"
          dest: "/etc/mm/mm-py/conf/{{ item }}"
          remote_src: yes
        loop:
          - mm.ini
          - cube-node.ini
          - order.ini

      - name: Run create-systemd.sh script to register cube-node service
        command: "./scripts/create-systemd.sh cube-node"
        args:
          chdir: /etc/mm

      - name: Run create-systemd.sh script to register creeper-service service
        command: "./scripts/create-systemd.sh creeper-service"
        args:
          chdir: /etc/mm

      - name: Start cube-node service
        systemd:
          name: cube-node
          state: started

      - name: Start creeper-service service
        systemd:
          name: creeper-service
          state: started
    when: cube_node_order_key_line_count.stdout == "2"
  when: cube_node_order_key_stat.stat.exists

- block:
  - name: Check if cube_node_key exists and has 1 line
    shell: "wc -l {{ cube_node_key_path }} | awk '{print $1}'"
    register: cube_node_key_lines
    delegate_to: localhost

  - name: Run tasks for cube_node_key
    block:
      - name: Copy install_cube_node.pkg to remote host
        copy:
          src: install_cube_node.pkg
          dest: /tmp/install_cube_node.pkg
          mode: '0755'

      - name: Execute install_cube_node.pkg
        command: "./install_cube_node.pkg /etc/mm"
        args:
          chdir: /tmp

      - name: Run build-dependency.sh script in /etc/mm
        command: "./scripts/build-dependency.sh"
        args:
          chdir: /etc/mm

      - name: Read cube_node_key content
        slurp:
          src: "{{ cube_node_key_path }}"
        register: cube_node_key_file
        delegate_to: localhost

      - name: Set cube_node_key_content variable
        set_fact:
          cube_node_key_content: "{{ cube_node_key_file['content'] | b64decode }}"

      - name: Run tasks for cube_node_key
        block:
          - name: Create mm.ini
            copy:
              content: |
                [core]
                temp-path=tmp

                [extension]
                paths=
                  ../extensions

                [logging]
                log-level=INFO

                [java]
                path = /etc/mm/jdk/bin/java
              dest: "/tmp/mm.ini"

      - name: Create cube-node.ini
        copy:
          content: |
            [cube-mesh]
            server-list=
              {{ server_ip }}:8837

            [cube-node]
            key={{ cube_node_key_content }}
          dest: "/tmp/cube-node.ini"

      - name: Copy files to remote host
        copy:
          src: "/tmp/{{ item }}"
          dest: "/etc/mm/mm-py/conf/{{ item }}"
          remote_src: yes
        loop:
          - mm.ini
          - cube-node.ini

      - name: Run create-systemd.sh script to register service
        command: "./scripts/create-systemd.sh cube-node"
        args:
          chdir: /etc/mm

      - name: Start cube-node service
        systemd:
          name: cube-node
          state: started
    when: cube_node_key_lines.stdout == "1"
  when: cube_node_key_stat.stat.exists

- name: Ensure the marker file exists
  copy:
    dest: /var/lib/pkg_file
    content: ""
    force: no
  when:
    - not marker.stat.exists
    - cube_node_order_key_stat.stat.exists or cube_node_key_stat.stat.exists

- name: Read the content of current.version
  slurp:
    src: "{{key_file_dir}}current.version"
  register: current_version_file
  delegate_to: localhost

- name: Set the current_version variable
  set_fact:
    current_version: "{{ current_version_file['content'] | b64decode }}"
  
- name: Ensure a line is present in the marker file
  lineinfile:
    path: /var/lib/pkg_file
    line: "{{ current_version }}"
  when:
    - not marker.stat.exists
    - cube_node_order_key_stat.stat.exists or cube_node_key_stat.stat.exists

- name: Output a message if none of the key files exist
  debug:
    msg: "At least one of cube_node_order_key or cube_node_key must exist for install pkg."
  when:
    - not cube_node_order_key_stat.stat.exists
    - not cube_node_key_stat.stat.exists

- name: Cleanup tasks for cube_node_order_key
  block:
    - name: Remove temporary files from remote host for cube_node_order_key
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - install_cube_node_order.pkg
        - mm.ini
        - cube-node.ini
        - order.ini
      delegate_to: "{{ inventory_hostname }}"
    - name: Remove cube_node_order_key from localhost
      file:
        path: "{{ cube_node_order_key_path }}"
        state: absent
      delegate_to: localhost
  when: cube_node_order_key_stat.stat.exists

- name: Cleanup tasks for cube_node_key
  block:
    - name: Remove temporary files from remote host for cube_node_key
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - install_cube_node.pkg
        - mm.ini
        - cube-node.ini
      delegate_to: "{{ inventory_hostname }}"
    - name: Remove cube_node_key from localhost
      file:
        path: "{{ cube_node_key_path }}"
        state: absent
      delegate_to: localhost
  when: cube_node_key_stat.stat.exists
