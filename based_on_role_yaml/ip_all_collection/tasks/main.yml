---
# tasks file for ip_all_collection
- name: Check if remote file exists
  stat:
    path: "{{ remote_file_path }}"
  register: remote_file_stat

- name: Fail if remote file does not exist
  fail:
    msg: "The remote file {{ remote_file_path }} does not exist!"
  when: not remote_file_stat.stat.exists

- name: Fetch the remote file
  fetch:
    src: "{{ remote_file_path }}"
    dest: "{{ local_file_path }}"
    flat: yes
  when: remote_file_stat.stat.exists

- name: Check the file type
  command: "file {{ local_file_path }}"
  delegate_to: localhost
  register: file_type

- name: Remove escape sequences from the file if not ASCII text
  shell: "sed -r 's/\\x1B\\[[0-9;]*[a-zA-Z]//g' {{ local_file_path }} > {{ local_file_clear_path }}"
  delegate_to: localhost
  when: "'ASCII text' not in file_type.stdout"

- name: Combine all files in remote directory
  shell: "cat {{ remote_dir }}*.log > {{ temp_remote_combined_file }}"
  args:
    executable: /bin/bash

- name: Check if combined remote file exists
  stat:
    path: "{{ temp_remote_combined_file }}"
  register: combined_remote_file_stat

- name: Fail if combined remote file does not exist
  fail:
    msg: "The combined remote file {{ temp_remote_combined_file }} does not exist!"
  when: not combined_remote_file_stat.stat.exists

- name: Fetch the combined remote file
  fetch:
    src: "{{ temp_remote_combined_file }}"
    dest: "{{ local_combined_file_path }}"
    flat: yes
  when: combined_remote_file_stat.stat.exists

- name: Extract IPs from the combined remote file
  shell: "grep -oE '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b' {{ local_combined_file_path }} > {{ local_file_extracted_path }}"
  args:
    executable: /bin/bash
  delegate_to: localhost

- name: Create directory with current year, month, and date
  file:
    path: "{{ dir_ip_log }}/{{ currdate }}"
    state: directory
  delegate_to: localhost

- name: Concatenate files and remove duplicates
  shell: "cat {{ 'ASCII text' in file_type.stdout | ternary(local_file_path, local_file_clear_path) }} {{ local_file_extracted_path }} | sort | uniq > {{ dir_ip_log }}/{{ currdate }}/all_ip"
  delegate_to: localhost

- name: Set previous date
  set_fact:
    prevdate: "{{ lookup('pipe', 'date -d \"yesterday\" +%Y%m%d') }}"

- name: Compare current and previous day's IPs
  shell: "diff {{ dir_ip_log }}/{{ currdate }}/all_ip {{ dir_ip_log }}/{{ prevdate }}/all_ip || true"
  delegate_to: localhost
  register: ip_diff

- name: Save IP differences
  copy:
    content: "{{ ip_diff.stdout }}"
    dest: "{{ dir_ip_log }}/{{ currdate }}/ip_diff"
  delegate_to: localhost

- name: Check if nmap_scan.py is running
  shell: "pgrep -f nmap_scan.py"
  ignore_errors: true
  register: nmap_scan_pid

- name: Copy Nmap Scanning Script to remote host
  copy:
    src: files/nmap_scan.py
    dest: /tmp/nmap_scan.py
    mode: '0755'
  when: nmap_scan_pid.rc != 0

- name: Add script execution to rc.local with unique tag
  lineinfile:
    path: /etc/rc.d/rc.local
    line: '/usr/bin/python3 /tmp/nmap_scan.py & # unique_tag'
    create: yes
    mode: '0755'
  when: nmap_scan_pid.rc != 0

- name: Copy all_ip file to remote host
  copy:
    src: "{{ dir_ip_log }}/{{ currdate }}/all_ip"
    dest: /tmp/all_ip
    mode: '0644'

- name: Execute specific line from rc.local with unique tag
  shell: grep 'unique_tag' /etc/rc.d/rc.local | sh &
  async: 3600
  poll: 0
  when: nmap_scan_pid.rc != 0

- name: Check if flag file exists for today's nmap scan
  stat:
    path: "{{ flag_file_path }}"
  register: flag_file_stat

- name: Check if flag file exists using command
  command: "ls {{ flag_file_path }}"
  register: flag_file_command_result
  ignore_errors: true

- name: Fetch the filtered IPs if flag file exists
  fetch:
    src: "{{ temp_remote_filtered_ips_file }}"
    dest: "{{ local_filtered_ips_path }}"
    flat: yes
  when: flag_file_stat.stat.exists

- name: Clear the temp log file
  copy:
    content: ""
    dest: "{{ temp_remote_log_file }}"
  when: flag_file_stat.stat.exists

- name: Remove local file path
  file:
    path: "{{ local_file_path }}"
    state: absent
  delegate_to: localhost

- name: Remove local file clear path
  file:
    path: "{{ local_file_clear_path }}"
    state: absent
  delegate_to: localhost

- name: Remove local combined file path
  file:
    path: "{{ local_combined_file_path }}"
    state: absent
  delegate_to: localhost

- name: Remove local file extracted path
  file:
    path: "{{ local_file_extracted_path }}"
    state: absent
  delegate_to: localhost
