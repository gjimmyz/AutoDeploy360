- name: "Centos7 Include vars"
  include_vars: ../vars/system_info_var.yaml

- name: "Centos7 disable selinux"
  selinux: state=disabled

- name: "Centos7 disable firewalld"
  service: name=firewalld state=stopped enabled=no

- name: "Make /etc/rc.d/rc.local executable"
  file:
    path: /etc/rc.d/rc.local
    mode: '0755'

- name: "Centos7 Copy binary files"
  copy:
    src: "{{ item }}"
    dest: "/usr/bin/{{ item }}"
    mode: '0755'
  with_items:
    - ossutil64

- name: "Centos7 Copy the rpm files"
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
  with_items:
    - hpssacli-2.40-13.0.x86_64.rpm
    - MegaCli-8.07.14-1.noarch.rpm
    - zabbix-agent-3.0.2-1.el7.x86_64.rpm

- name: "Centos7 Install the rpm packages"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - /tmp/hpssacli-2.40-13.0.x86_64.rpm
    - /tmp/MegaCli-8.07.14-1.noarch.rpm
    - /tmp/zabbix-agent-3.0.2-1.el7.x86_64.rpm

- name: "Centos7 Start zabbix-agent service and enable at boot"
  systemd:
    name: zabbix-agent
    state: started
    enabled: yes

- name: "Centos7 change root passwd"
  user:
    name: "{{ item.name }}"
    password: "{{ item.password | password_hash('sha512') }}"
    update_password: always
  with_items: "{{ user_info }}"
  changed_when : false
  no_log: true

- name: "Centos7 Set Shanghai timezone"
  timezone:
    name: Asia/Shanghai

- name: "Centos7 Configure sudoers file for user user"
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ ssh_user }}'
    line: '{{ ssh_user }} ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'

- name: "Centos7 mod sshd_config"
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      UseDNS no
  register: sshd_config_update

- name: "Centos7 restart sshd"
  systemd:
    state: restarted
    daemon_reload: yes
    name: sshd
  when:
    - sshd_config_update.changed

- name: "Centos7 Change various sysctl-settings"
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
    ignoreerrors: yes
  with_dict: '{{ sysctl_config }}'

- name: "Centos7 Check if lock file exists for yum clean metadata"
  stat:
    path: /var/cache/yum/.yum-clean-metadata-lock
  register: clean_metadata_lock_file_stat

- set_fact:
    should_execute: "{{ not clean_metadata_lock_file_stat.stat.exists or (ansible_date_time.epoch | int - clean_metadata_lock_file_stat.stat.mtime | int > lock_file_timeout) }}"

- name: "Centos7 Cleanup Cache"
  command: yum clean metadata
  args:
    warn: no
  when: should_execute

- name: "Centos7 Create lock file for yum clean metadata"
  file:
    path: /var/cache/yum/.yum-clean-metadata-lock
    state: touch
  when: should_execute

- name: "Centos7 blocks the default source"
  yum:
    name: yum-utils
    disablerepo: "base,extras,updates"

- name: "Centos7 Check if lock file exists for disable old base extras updates repo"
  stat:
    path: /var/cache/yum/.yum-disable-metadata-lock
  register: disable_metadata_lock_file_stat

- set_fact:
    should_execute: "{{ not disable_metadata_lock_file_stat.stat.exists or (ansible_date_time.epoch | int - disable_metadata_lock_file_stat.stat.mtime | int > lock_file_timeout) }}"

- name: "Centos7 disable old base extras updates repo"
  command: yum-config-manager --disable base extras updates
  when: should_execute

- name: "Centos7 Create lock file for disable old base extras updates repo"
  file:
    path: /var/cache/yum/.yum-disable-metadata-lock
    state: touch
  when: should_execute

- name: "Centos7 Check if lock file exists for check-internet"
  stat:
    path: /var/cache/yum/.yum-check-internet-metadata-lock
  register: check_internet_metadata_lock_file_stat

- set_fact:
    should_execute: "{{ not check_internet_metadata_lock_file_stat.stat.exists or (ansible_date_time.epoch | int - check_internet_metadata_lock_file_stat.stat.mtime | int > lock_file_timeout) }}"
    
- set_fact:
    is_internet_available: "{{ not should_execute }}"

- name: "Centos7 Check if internet is available"
  block:
    - command: "ping -c {{ ping_num }} {{ item }}"
      register: ping_result
      ignore_errors: true
      loop: "{{ internet_check_ips }}"
      changed_when: false

    - set_fact:
        is_internet_available: "{{ ping_result.results is defined and ping_result.results | map(attribute='rc') | map('default', 1) | select('equalto', 0) | list | length > 0 }}"
  when: should_execute

- set_fact:
    pip_index_url: "{{ pip_index_url_wai if is_internet_available else pip_index_url_nei }}"
    pip_trusted_host: "{{ pip_trusted_host_wai if is_internet_available else pip_trusted_host_nei }}"

- set_fact:
    pip_index_url: "{{ pip_index_url_wai if is_internet_available else pip_index_url_nei }}"
    pip_trusted_host: "{{ pip_trusted_host_wai if is_internet_available else pip_trusted_host_nei }}"
  when: is_internet_available is defined

- name: "Centos7 Ensure .pip directory exists"
  file:
    path: /root/.pip
    state: directory

- name: "Centos7 Configure pip"
  template:
    src: pip.conf.j2
    dest: /root/.pip/pip.conf
  when: is_internet_available is defined and is_internet_available

- name: "Centos7 Load outernet repo vars"
  include_vars: ../vars/vars_repo_out.yaml
  when: is_internet_available is defined and is_internet_available

- name: "Centos7 Load internal repo vars"
  include_vars: ../vars/vars_repo_in.yaml
  when: is_internet_available is defined and not is_internet_available

- name: "Centos7 creates and updates new repo files"
  template:
    src: "baseepel_all.j2"
    dest: "/etc/yum.repos.d/baseepel.repo"
    owner: root
    group: root
    mode: '0644'
  when: is_internet_available is defined

- name: "Centos7 Create lock file for check-internet"
  file:
    path: /var/cache/yum/.yum-check-internet-metadata-lock
    state: touch
  when: is_internet_available is defined

- block:
    - name: "Centos7 Set up cron job for time synchronization for internet hosts"
      cron:
        name: "Sync time every hour"
        minute: "30"
        hour: "*"
        user: root
        job: "{{ ntp_cron_job }}"
  when: is_internet_available is defined and is_internet_available

- block:
    - name: "Centos7 Delete server lines in ntp.conf"
      lineinfile:
        dest: /etc/ntp.conf
        regex: '^server [0-4].centos.pool.ntp.org iburst'
        state: absent
        backup: yes
        backrefs: yes

    - name: "Centos7 Add internal ntp servers"
      blockinfile:
        path: /etc/ntp.conf
        block: |
          server {{ ntp_server_1 }} iburst
          server {{ ntp_server_2 }} iburst
        register: ntp_config_update

    - name: "Centos7 Restart ntpd service"
      systemd:
        state: restarted
        daemon_reload: yes
        name: ntpd
        enabled: yes
      when:
        - ntp_config_update.changed
  when: is_internet_available is defined and not is_internet_available

- name: "Centos7 Check if lock file exists for yum makecache metadata"
  stat:
    path: /var/cache/yum/.yum-makecache-metadata-lock
  register: makecache_metadata_lock_file_stat

- set_fact:
    should_execute: "{{ not makecache_metadata_lock_file_stat.stat.exists or (ansible_date_time.epoch | int - makecache_metadata_lock_file_stat.stat.mtime | int > lock_file_timeout) }}"

- name: "Centos7 flush repo"
  command: yum makecache
  args:
    warn: no
  when: should_execute

- name: "Centos7 Create lock file for yum makecache metadata"
  file:
    path: /var/cache/yum/.yum-makecache-metadata-lock
    state: touch
  when: should_execute

- name: "Centos7 Install base software"
  yum:
    name: "{{ software_list }}"
    state: present

- name: "Centos7 Upgrade pip using pip"
  ansible.builtin.pip:
    name: pip==20.3.4
    state: present
    executable: pip3

- name: "Centos7 Install xxx using pip3"
  ansible.builtin.pip:
    name: pyyaml,distro,iperf3
    executable: pip3
    state: present

- name: "Centos7 Set limits"
  lineinfile:
    dest: /etc/security/limits.conf
    line: "{{ item }}"
    state: present
  loop:
    - '*                soft    nofile           819200'
    - '*                hard    nofile           819200'
    - '*                soft    core             2048000'
    - '*                hard    core             2048000'
    - '*                soft    nproc            65535'
    - '*                hard    nproc            65535'

- name: "Centos7 Get current tuned profile"
  shell: "tuned-adm active | awk -F': ' '{print $2}'"
  register: current_tuned_profile
  changed_when: False

- name: "Centos7 Activate network-throughput profile"
  command: tuned-adm profile network-latency
  when: current_tuned_profile.stdout != "network-latency"

- name: "Centos7 Check if DHCP is used"
  shell: grep -i '^BOOTPROTO=dhcp' /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
  register: dhcp_used
  failed_when: false
  changed_when: false

- name: "Centos7 Check if network configuration has been applied"
  stat:
    path: /var/lib/network_config_applied
  register: network_config_applied

- name: "Centos7 Configure static IP using nmcli"
  nmcli:
    conn_name: "{{ ansible_default_ipv4.interface }}"
    ifname: "{{ ansible_default_ipv4.interface }}"
    type: ethernet
    state: present
    ip4: "{{ ansible_default_ipv4.address }}"
    gw4: "{{ ansible_default_ipv4.gateway }}"
    dns4: "{{ internet_check_ips }}"
    #dns4: ["223.5.5.5","114.114.114.114","8.8.8.8"]
  register: interface_configured
  when: not network_config_applied.stat.exists and dhcp_used.rc == 0

- name: "Centos7 Reset connection"
  meta: reset_connection

- name: "Centos7 Create a flag file after network configuration"
  file:
    path: /var/lib/network_config_applied
    state: touch
  when: not network_config_applied.stat.exists and interface_configured.changed

- name: "Get the pre-set maximum RX and TX ring parameters"
  shell: ethtool -g {{ ansible_default_ipv4.interface }} | grep "RX:" | awk 'NR==1{print $2}' && ethtool -g {{ ansible_default_ipv4.interface }} | grep "TX:" | awk 'NR==1{print $2}'
  register: max_ring_values
  ignore_errors: true
  changed_when: false

- name: "Get the current RX and TX ring parameters"
  shell: ethtool -g {{ ansible_default_ipv4.interface }} | grep "RX:" | awk 'NR==2{print $2}' && ethtool -g {{ ansible_default_ipv4.interface }} | grep "TX:" | awk 'NR==2{print $2}'
  register: ring_output
  ignore_errors: true
  changed_when: false

- name: "Set RX and TX ring parameters to pre-set maximums if not already set"
  command:
    cmd: "/sbin/ethtool -G {{ ansible_default_ipv4.interface }} rx {{ max_ring_values.stdout_lines[0] }} tx {{ max_ring_values.stdout_lines[1] }}"
  ignore_errors: true
  when: ring_output.stdout_lines[0] != max_ring_values.stdout_lines[0] or ring_output.stdout_lines[1] != max_ring_values.stdout_lines[1]

- name: "Get the current RX and TX ring parameters again"
  shell: ethtool -g {{ ansible_default_ipv4.interface }} | grep "RX:" | awk 'NR==2{print $2}' && ethtool -g {{ ansible_default_ipv4.interface }} | grep "TX:" | awk 'NR==2{print $2}'
  ignore_errors: true
  changed_when: false

- name: "Get the pre-set maximum Combined channel parameter"
  shell: ethtool -l {{ ansible_default_ipv4.interface }} | grep "Combined:" | awk 'NR==1{print $2}'
  register: max_combined_value
  ignore_errors: true
  changed_when: false

- name: "Get the current Combined channel parameter"
  shell: ethtool -l {{ ansible_default_ipv4.interface }} | grep "Combined:" | awk 'NR==2{print $2}'
  register: combined_output
  ignore_errors: true
  changed_when: false

- name: "Set Combined channel parameter to pre-set maximum if not already set"
  command:
    cmd: "/sbin/ethtool -L {{ ansible_default_ipv4.interface }} combined {{ max_combined_value.stdout }}"
  ignore_errors: true
  when: combined_output.stdout != max_combined_value.stdout

- name: "Add RX and TX ring parameters settings to rc.local"
  lineinfile:
    path: /etc/rc.d/rc.local
    line: "/sbin/ethtool -G {{ ansible_default_ipv4.interface }} rx {{ max_ring_values.stdout_lines[0] }} tx {{ max_ring_values.stdout_lines[1] }}"
    create: yes
    state: present
  when: ring_output.stdout_lines[0] != max_ring_values.stdout_lines[0] or ring_output.stdout_lines[1] != max_ring_values.stdout_lines[1]

- name: "Add Combined channel parameters settings to rc.local"
  lineinfile:
    path: /etc/rc.d/rc.local
    line: "/sbin/ethtool -L {{ ansible_default_ipv4.interface }} combined {{ max_combined_value.stdout }}"
    create: yes
    state: present
  when: combined_output.stdout != max_combined_value.stdout
